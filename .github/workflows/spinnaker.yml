name: Deploy Spinnaker

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        java-package: jdk
        architecture: x64 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

        # Verify the installation of kubectl
        kubectl help

        # Download and install aws-iam-authenticator
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH 
        echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc

        #Verify the installation of aws-iam-authenticator
        aws-iam-authenticator help            
    
    - name: Install Hallyard
      run: |
        curl -O https://raw.githubusercontent.com/spinnaker/halyard/master/install/debian/InstallHalyard.sh
        sudo bash InstallHalyard.sh --user runner && echo "success" || echo "failure"
        hal -v 
        echo sudo update-halyard && echo "success" || echo "failure"
        
    - name: Retrieve Amazon EKS cluster kubectl contexts
      run: |
        hal config provider kubernetes enable
    
    - name: Retrieve Amazon EKS cluster kubectl contexts2
      run: |
        hal config provider kubernetes enable
        kubectl config use-context eks-spinnaker
        CONTEXT=$(kubectl config current-context)
        kubectl apply --context $CONTEXT -f https://www.spinnaker.io/downloads/kubernetes/service-account.yml
        TOKEN=$(kubectl get secret --context $CONTEXT $(kubectl get serviceaccount spinnaker-service-account --context $CONTEXT -n spinnaker -o jsonpath='{.secrets[0].name}') -n spinnaker -o jsonpath='{.data.token}' | base64 --decode)
        kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN
        kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user
        hal config provider kubernetes account add eks-spinnaker --context $CONTEXT        

    - name: Enable artifact Support
      run: |
        hal config features edit --artifacts true

    - name: Configure Spinnaker to install in Kubernetes
      run: |
        hal config deploy edit --type distributed --account-name eks-spinnaker

    - name: Configure Spinnaker to use AWS S3
      run: |
        hal config storage s3 edit --access-key-id ${{ secrets.AWS_ACCESS_KEY_ID }} --secret-access-key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --no-validate
        hal config storage edit --type s3

    - name: Set Spinnaker Version
      run: |
        export VERSION=1.24.4
        hal config version edit --version $VERSION

    - name: Deploy Spinnaker
      run: |
        hal deploy apply --no-validate --wait-for-completion   

    - name: Expose Behind LoadBalancer
      run: |
        export NAMESPACE=spinnaker
        kubectl -n $NAMESPACE expose service spin-gate --type LoadBalancer --port 80 --target-port 8084 --name spin-gate-public
        kubectl -n $NAMESPACE expose service spin-deck --type LoadBalancer --port 80 --target-port 9000 --name spin-deck-public
        export API_URL=$(kubectl -n $NAMESPACE get svc spin-gate-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        export UI_URL=$(kubectl -n $NAMESPACE get svc spin-deck-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        # Configure the URL for Gate
        hal config security api edit --override-base-url http://$API_URL
        # Configure the URL for Deck
        hal config security ui edit --override-base-url http://$UI_URL
        
    - name: ReDeploy Spinnaker
      run: |
        hal deploy apply --no-validate --wait-for-completion      

    - name: Config OAuth
      run: |
        export NAMESPACE=spinnaker
        export CLIENT_ID=${{ secrets.CLIENT_ID }}
        export CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
        export API_URL=$(kubectl -n $NAMESPACE get svc spin-gate-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        export UI_URL=$(kubectl -n $NAMESPACE get svc spin-deck-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        hal config security authn oauth2 edit --client-id $CLIENT_ID --client-secret $CLIENT_SECRET --provider github
        hal config security authn oauth2 enable
        hal config security authn oauth2 edit --pre-established-redirect-uri http://$API_URL/login

    - name: ReDeploy Spinnaker Again
      run: |
        hal deploy apply --no-validate --wait-for-completion



