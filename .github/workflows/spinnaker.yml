name: Deploy Spinnaker

on:
  push:
    branches: [ master ]

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}      
  EKS_CLUSTER: spinnaker-cluster
  NAMESPACE: spinnaker
  SPINNAKER_VERSION: 1.24.4

jobs:
  deploy_spinnaker:
    name: Deploy Spinnaker
    runs-on: ubuntu-latest


    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Java
      uses: actions/setup-java@v1
      with:
        java-version: '11'
        java-package: jdk
        architecture: x64 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

        # Verify the installation of kubectl
        kubectl help

        # Download and install aws-iam-authenticator
        curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$HOME/bin:$PATH 
        echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc

        # Verify the installation of aws-iam-authenticator
        aws-iam-authenticator help      
        aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION --alias $EKS_CLUSTER
    
    - name: Install Hallyard
      run: |
        curl -O https://raw.githubusercontent.com/spinnaker/halyard/master/install/debian/InstallHalyard.sh
        sudo bash InstallHalyard.sh --user runner && echo "Successfully installed Halyard" || echo "Halyard still starting but moving on"
        hal -v 

    - name: Set Amazon EKS cluster kubectl context
      run: |
        hal config provider kubernetes enable
        kubectl config use-context $EKS_CLUSTER
        echo "CONTEXT=$(kubectl config current-context)" >> $GITHUB_ENV

    - name: Configure kubectl contexts
      run: |
        kubectl apply --context $CONTEXT -f https://www.spinnaker.io/downloads/kubernetes/service-account.yml
        TOKEN=$(kubectl get secret --context $CONTEXT $(kubectl get serviceaccount spinnaker-service-account --context $CONTEXT -n $NAMESPACE -o jsonpath='{.secrets[0].name}') -n spinnaker -o jsonpath='{.data.token}' | base64 --decode)
        
        kubectl config set-credentials ${CONTEXT}-token-user --token $TOKEN
        kubectl config set-context $CONTEXT --user ${CONTEXT}-token-user
        hal config provider kubernetes account add $EKS_CLUSTER --context $CONTEXT        

    - name: Enable artifact Support
      run: |
        hal config features edit --artifacts true

    - name: Configure Spinnaker to install in Kubernetes
      run: |
        hal config deploy edit --type distributed --account-name $EKS_CLUSTER

    - name: Configure Spinnaker to use AWS S3
      run: |
        hal config storage s3 edit --access-key-id $AWS_ACCESS_KEY --secret-access-key $AWS_SECRET_ACCESS_KEY --no-validate
        hal config storage edit --type s3

    - name: Set Spinnaker Version
      run: |
        hal config version edit --version $SPINNAKER_VERSION

    - name: Deploy Spinnaker
      run: |
        hal deploy apply --no-validate  
      
    - name: Expose Services Behind LoadBalancer
      run: |
        kubectl -n $NAMESPACE expose service spin-gate --type LoadBalancer --port 80 --target-port 8084 --name spin-gate-public && echo "exposed" || echo "already exposed"
        kubectl -n $NAMESPACE expose service spin-deck --type LoadBalancer --port 80 --target-port 9000 --name spin-deck-public && echo "exposed" || echo "already exposed"        
        echo "API_URL=http://$(kubectl -n $NAMESPACE get svc spin-gate-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV
        echo "UI_URL=http://$(kubectl -n $NAMESPACE get svc spin-deck-public -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" >> $GITHUB_ENV

    - name: Configure Spinnaker with Exposed Services
      run: |       
        echo The API_URL = $API_URL
        echo The UI_URL = $UI_URL
        hal config security api edit --override-base-url $API_URL
        hal config security ui edit --override-base-url $UI_URL

    - name: ReDeploy Spinnaker
      run: |
        hal deploy apply --no-validate  

    - name: Config OAuth
      run: |
        hal config security authn oauth2 edit --client-id $CLIENT_ID --client-secret $CLIENT_SECRET --provider github
        hal config security authn oauth2 enable
        hal config security authn oauth2 edit --pre-established-redirect-uri $API_URL/login

    - name: ReDeploy Spinnaker Again
      run: |
        hal deploy apply --no-validate



